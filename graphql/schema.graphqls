"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""
Tells the service this field/object has access authorized by a Cognito User Pools token.
"""
directive @aws_cognito_user_pools(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an OIDC token.
"""
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"""
Tells the service which subscriptions will be published to when this mutation is called. This directive is deprecated use @aws_susbscribe directive instead.
"""
directive @aws_publish(
  """
  List of subscriptions which will be published to when this mutation is called.
  """
  subscriptions: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Lambda Authorizer.
"""
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"""Directs the schema to enforce authorization on a field"""
directive @aws_auth(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an API key.
"""
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by sigv4 signing.
"""
directive @aws_iam on OBJECT | FIELD_DEFINITION

"""Tells the service which mutation triggers this subscription."""
directive @aws_subscribe(
  """
  List of mutations which will trigger this subscription when they are called.
  """
  mutations: [String]
) on FIELD_DEFINITION

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""  List of available queries in UGC API."""
type Query {
  """  Returns the current client details."""
  client: Client!

  """  Get file details with given file id."""
  getFile(fileId: ID!): File!

  """  Get job details from given job id."""
  getJob(jobId: ID!): Job!

  """  Get a take with give id."""
  getTake(takeId: ID!): Take!

  """  Get a list of jobs."""
  listJobs(first: Int, after: AWSJSON, sortDirection: SortDirection, takeId: String): JobsPage

  """  Get a list of takes."""
  listTakes(first: Int, after: AWSJSON, sortDirection: SortDirection): TakesPage
}

"""  Representation of a Client account."""
type Client implements Identifier & Timestamped {
  """  Datetime at which the Client was created."""
  created: AWSDateTime!

  """  Unique identifier for this client."""
  id: ID!

  """  Metadata for the client to store any key value pairs - json validation done by AWS
  """
  metadata: AWSJSON

  """  Name associated to this client."""
  name: String!

  """  Portal url associated to this client."""
  portal: AWSURL
}

"""
The `AWSDateTime` scalar type provided by AWS AppSync, represents a valid ***extended*** [ISO 8601 DateTime](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) string. In other words, this scalar type accepts datetime strings of the form `YYYY-MM-DDThh:mm:ss.SSSZ`.  The scalar can also accept "negative years" of the form `-YYYY` which correspond to years before `0000`. For example, "**-2017-01-01T00:00Z**" and "**-9999-01-01T00:00Z**" are both valid datetime strings.  The field after the two digit seconds field is a nanoseconds field. It can accept between 1 and 9 digits. So, for example, "**1970-01-01T12:00:00.2Z**", "**1970-01-01T12:00:00.277Z**" and "**1970-01-01T12:00:00.123456789Z**" are all valid datetime strings.  The seconds and nanoseconds fields are optional (the seconds field must be specified if the nanoseconds field is to be used).  The [time zone offset](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators) is compulsory for this scalar. The time zone offset must either be `Z` (representing the UTC time zone) or be in the format `Â±hh:mm:ss`. The seconds field in the timezone offset will be considered valid even though it is not part of the ISO 8601 standard.
"""
scalar AWSDateTime

"""
The `AWSJSON` scalar type provided by AWS AppSync, represents a JSON string that complies with [RFC 8259](https://tools.ietf.org/html/rfc8259).  Maps like "**{\\"upvotes\\": 10}**", lists like "**[1,2,3]**", and scalar values like "**\\"AWSJSON example string\\"**", "**1**", and "**true**" are accepted as valid JSON and will automatically be parsed and loaded in the resolver mapping templates as Maps, Lists, or Scalar values rather than as the literal input strings.  Invalid JSON strings like "**{a: 1}**", "**{'a': 1}**" and "**Unquoted string**" will throw GraphQL validation errors.
"""
scalar AWSJSON

"""
The `AWSURL` scalar type provided by AWS AppSync, represents a valid URL string (Ex: <https://www.amazon.com/>). The URL may use any scheme and may also be a local URL (Ex: <http://localhost/>).  URLs without schemes like "**amazon.com**" or "**www.amazon.com**" are considered invalid. URLs which contain double slashes (two consecutive forward slashes) in their path are also considered invalid.
"""
scalar AWSURL

"""  Implement this interface to add an identifier to your schema"""
interface Identifier {
  """  Unique identifier."""
  id: ID
}

"""  Implement this interface to make your schema timestampable"""
interface Timestamped {
  """  The child type should define this attribute."""
  created: AWSDateTime
}

"""  Represents a File in UGC API."""
type File implements Identifier & Timestamped & InternalFileSchema & ClientOwner {
  """  Associated client account which created this file."""
  client: Client

  """  Datetime at which the file was created."""
  created: AWSDateTime

  """  Unique identifier for a File."""
  id: ID!

  """  Metadata for the client to store any key value pairs - json validation done by AWS
  """
  metadata: AWSJSON

  """  Url to upload/download the file. When creating a file, this attribute will return a upload url. Otherwise, this attribute will represent a download url.
  """
  presignedUrl: AWSURL

  """  Type (extension) of a file. Example: mp4, mov, avi etc."""
  type: String!
}

"""  Implement this interface to add internal file service structure to your schema
"""
interface InternalFileSchema {
  """  Url to upload/download the file. When creating a file, this attribute will return a upload url. Otherwise, this attribute will represent a download url.
  """
  presignedUrl: AWSURL

  """  Type (extension) of a file. Example: mp4, mov, avi etc."""
  type: String
}

"""  Implement this interface if your schema has a client owner"""
interface ClientOwner {
  """  Reference to the associated Client owner."""
  client: Client
}

"""  Represents an animation job for a take"""
type Job implements Identifier & Timestamped & ClientOwner {
  """  Client owner of this job"""
  client: Client!

  """  Datetime at which the job was created"""
  created: AWSDateTime

  """  Unique identifier for the job"""
  id: ID!

  """  Metadata json field where the client can store any key value pair"""
  metadata: AWSJSON

  """  Outputs of this job"""
  outputs: [AdditionalFile]

  """  Current status of the job"""
  state: String

  """  Reference to the original take"""
  take: Take
}

"""  An additional file which may be attached to the take"""
type AdditionalFile {
  """  Reference to the additional file object"""
  file: File!

  """  Type of additional file"""
  key: String!
}

"""  Representation of a take"""
type Take implements Identifier & Timestamped & ClientOwner {
  """  Optional additional files for this take"""
  additionalFiles: [AdditionalFile]

  """  Reference to the client owner of the take"""
  client: Client!

  """  Datetime string at which the take was created"""
  created: AWSDateTime!

  """   Unique id of a take """
  id: ID!

  """  Metadata for the client to store any key value pairs - json validation done by AWS
  """
  metadata: AWSJSON

  """  Reference to the video file included with this take"""
  videoFile: File!
}

"""  Job model connection. This connection will return a page of takes."""
type JobsPage implements Page {
  """  Next page token"""
  after: AWSJSON

  """  Number of items on the single page"""
  first: Int

  """  List of items on the current page"""
  items: [Job]
}

"""  Implement this interface for your schema page"""
interface Page {
  """  Next token for the items to be fetched in the remaining pages."""
  after: AWSJSON

  """  Items to fetch in a single page. Defaults to 50."""
  first: Int
}

enum SortDirection {
  ASC
  DESC
}

"""  Take model connection. This connection will return a page of takes."""
type TakesPage implements Page {
  """  Next token (if any)"""
  after: AWSJSON

  """  Number of elements in a single page"""
  first: Int

  """  List of takes in this page"""
  items: [Take]
}

"""  List of available mutations in UGC API."""
type Mutation {
  """  Create a file with given type (extension) of the file. For example: to create an mp4 file in the system, use `createFile(type: 'mp4')` mutation.
  """
  createFile(type: String!, metadata: AWSJSON): File!

  """  Initialize processing a job to generate animation from a take."""
  createJob(takeId: String!, metadata: AWSJSON): Job!

  """  Create a take from an existing file."""
  createTake(videoFileId: String!, additionalFileIds: [TakeFileInput!], metadata: AWSJSON): Take!

  """  Generate a share code for a job output. This is typically used to share the output of a job with other users (example: fbx and mp4 output files).
  """
  generateShareCode(fileId: String!): ShareCode!

  """  Perform an upsert operation on a webhook endpoint."""
  upsertWebhookEndpoint(description: String, events: [String!], metadata: AWSJSON, uid: String!, url: String!, secret: String): WebhookEndpoint!
}

"""  Input for an additional take file"""
input TakeFileInput {
  """  Reference to the associated file."""
  fileId: String

  """  Type of the additional file chosen from given values."""
  key: TakeFileInputKeys!
}

enum TakeFileInputKeys {
  DEPTH
  INTRINSIC
  MOVE
  ODOMETRY
  VISION
}

"""  Represents a ShareCode associated to a file in UGC API. This is usually generated for a job output.
"""
type ShareCode implements Timestamped {
  """  Share code value."""
  code: String!

  """  Datetime at which the share code was created."""
  created: AWSDateTime

  """  The share code will expire at."""
  expires: AWSDateTime

  """  File associated to the share code."""
  file: File

  """  Encoded url with code to download the file."""
  url: AWSURL
}

"""  Webhook endpoint represents a URL which will be called when an event occurs.
"""
type WebhookEndpoint {
  """  Associated client account which created this webhook endpoint."""
  client: Client!

  """  Description of the webhook endpoint. This is optional."""
  description: String

  """  Events to be subscribed to. This is required to perform an upsert operation.
  """
  events: [String!]

  """  Metadata to be associated with this webhook endpoint. This is optional.
  """
  metadata: AWSJSON

  """  Secret to be used to sign the payload. This is optional."""
  secret: String

  """  Unique identifier for the webhook endpoint. This is required to perform an upsert operation.
  """
  uid: String!

  """  URL of the webhook endpoint. This is required to perform an upsert operation.
  """
  url: String!
}